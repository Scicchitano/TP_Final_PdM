
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004428  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004608  08004608  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000860  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120ba  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002757  00000000  00000000  0003210a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00034868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  00035640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026289  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109ea  00000000  00000000  0005c599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fe5  00000000  00000000  0006cf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153f68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000389c  00000000  00000000  00153fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080045bc 	.word	0x080045bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	080045bc 	.word	0x080045bc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ControlFSM_init>:
int16_t Temp = 0;

bool flagButton = false;


void ControlFSM_init(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	/* Initialize BSP Led for LED */
	delayInit(&Timer_Alarma, Delay_Alarma);
 80004f4:	21c8      	movs	r1, #200	; 0xc8
 80004f6:	4813      	ldr	r0, [pc, #76]	; (8000544 <ControlFSM_init+0x54>)
 80004f8:	f000 f9c8 	bl	800088c <delayInit>
	delayInit(&Timer_Temp, Muestreo_Temp);
 80004fc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <ControlFSM_init+0x58>)
 8000502:	f000 f9c3 	bl	800088c <delayInit>


	/* Inicializo todos los LEDS en OFF*/
	BSP_LED_Init(LED1);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 ff28 	bl	800135c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800050c:	2001      	movs	r0, #1
 800050e:	f000 ff25 	bl	800135c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8000512:	2002      	movs	r0, #2
 8000514:	f000 ff22 	bl	800135c <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000518:	2100      	movs	r1, #0
 800051a:	2000      	movs	r0, #0
 800051c:	f000 ffbc 	bl	8001498 <BSP_PB_Init>


	BSP_LED_Off(LED1);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 ff85 	bl	8001430 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 ff82 	bl	8001430 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 800052c:	2002      	movs	r0, #2
 800052e:	f000 ff7f 	bl	8001430 <BSP_LED_Off>

	curr_state = LECTURA_TEMP;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <ControlFSM_init+0x5c>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]

	debounceFSM_init();
 8000538:	f000 f900 	bl	800073c <debounceFSM_init>
	SensorTemp_Init();
 800053c:	f000 fa5a 	bl	80009f4 <SensorTemp_Init>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	2000004c 	.word	0x2000004c
 8000548:	20000040 	.word	0x20000040
 800054c:	2000003c 	.word	0x2000003c

08000550 <ControlFSM_update>:


void ControlFSM_update(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	debounceFSM_update();
 8000554:	f000 f90c 	bl	8000770 <debounceFSM_update>
	switch (curr_state) {
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <ControlFSM_update+0xe4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d03e      	beq.n	80005de <ControlFSM_update+0x8e>
 8000560:	2b02      	cmp	r3, #2
 8000562:	dc62      	bgt.n	800062a <ControlFSM_update+0xda>
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <ControlFSM_update+0x1e>
 8000568:	2b01      	cmp	r3, #1
 800056a:	d010      	beq.n	800058e <ControlFSM_update+0x3e>
 800056c:	e05d      	b.n	800062a <ControlFSM_update+0xda>
		case LECTURA_TEMP:
			if (delayReadState(&Timer_Temp)) {
 800056e:	4832      	ldr	r0, [pc, #200]	; (8000638 <ControlFSM_update+0xe8>)
 8000570:	f000 f9aa 	bl	80008c8 <delayReadState>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <ControlFSM_update+0x36>
				Temp=SensorTemp_Read();
 800057a:	f000 fa41 	bl	8000a00 <SensorTemp_Read>
 800057e:	4603      	mov	r3, r0
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <ControlFSM_update+0xec>)
 8000584:	801a      	strh	r2, [r3, #0]
			}
			curr_state = DEFINICION_ESTADO;
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <ControlFSM_update+0xe4>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
			break;
 800058c:	e050      	b.n	8000630 <ControlFSM_update+0xe0>

		case DEFINICION_ESTADO:
			if (readKey()) {
 800058e:	f000 f96b 	bl	8000868 <readKey>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00d      	beq.n	80005b4 <ControlFSM_update+0x64>
				if (flagButton) {
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <ControlFSM_update+0xf0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d003      	beq.n	80005a8 <ControlFSM_update+0x58>
					flagButton = false;
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <ControlFSM_update+0xf0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e005      	b.n	80005b4 <ControlFSM_update+0x64>
				}else {
					flagButton = true;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <ControlFSM_update+0xf0>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
					Estado = Estado_Critico;
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <ControlFSM_update+0xf4>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!flagButton) {
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <ControlFSM_update+0xf0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d009      	beq.n	80005d6 <ControlFSM_update+0x86>
				Estado = Definir_Estado(Temp);
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <ControlFSM_update+0xec>)
 80005c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f83f 	bl	800064c <Definir_Estado>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <ControlFSM_update+0xf4>)
 80005d4:	701a      	strb	r2, [r3, #0]
			}
			curr_state = ACTIVACION_ESTADO;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <ControlFSM_update+0xe4>)
 80005d8:	2202      	movs	r2, #2
 80005da:	701a      	strb	r2, [r3, #0]
			break;
 80005dc:	e028      	b.n	8000630 <ControlFSM_update+0xe0>

		case ACTIVACION_ESTADO:
			switch (Estado) {
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <ControlFSM_update+0xf4>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d81c      	bhi.n	8000620 <ControlFSM_update+0xd0>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <ControlFSM_update+0x9c>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	0800061b 	.word	0x0800061b
 80005f0:	08000615 	.word	0x08000615
 80005f4:	0800060f 	.word	0x0800060f
 80005f8:	08000609 	.word	0x08000609
 80005fc:	08000601 	.word	0x08000601
				case Estado_Critico:
					Activar_Estado_Critico(&Timer_Alarma);
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <ControlFSM_update+0xf8>)
 8000602:	f000 f84f 	bl	80006a4 <Activar_Estado_Critico>
					break;
 8000606:	e00c      	b.n	8000622 <ControlFSM_update+0xd2>
				case Estado_Alto:
					Activar_Estado_Alto();
 8000608:	f000 f863 	bl	80006d2 <Activar_Estado_Alto>
					break;
 800060c:	e009      	b.n	8000622 <ControlFSM_update+0xd2>
				case Estado_Medio:
					Activar_Estado_Medio();
 800060e:	f000 f86d 	bl	80006ec <Activar_Estado_Medio>
					break;
 8000612:	e006      	b.n	8000622 <ControlFSM_update+0xd2>
				case Estado_Bajo:
					Activar_Estado_Bajo();
 8000614:	f000 f877 	bl	8000706 <Activar_Estado_Bajo>
					break;
 8000618:	e003      	b.n	8000622 <ControlFSM_update+0xd2>
				case Estado_Bajo_Cero:
					Activar_Estado_Bajo_Cero();
 800061a:	f000 f881 	bl	8000720 <Activar_Estado_Bajo_Cero>
					break;
 800061e:	e000      	b.n	8000622 <ControlFSM_update+0xd2>
				default:
					break;
 8000620:	bf00      	nop
			}
			curr_state = LECTURA_TEMP;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <ControlFSM_update+0xe4>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
			break;
 8000628:	e002      	b.n	8000630 <ControlFSM_update+0xe0>
		default:
				//Si algo modificó la variable estadoActual
				// a un estado no válido llevo la MEF a un
				// lugar seguro, por ejemplo, la reinicio:
				//controlDeErrores();
				ControlFSM_init();
 800062a:	f7ff ff61 	bl	80004f0 <ControlFSM_init>
				break;
 800062e:	bf00      	nop
	}
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000003c 	.word	0x2000003c
 8000638:	20000040 	.word	0x20000040
 800063c:	2000005a 	.word	0x2000005a
 8000640:	2000005c 	.word	0x2000005c
 8000644:	20000058 	.word	0x20000058
 8000648:	2000004c 	.word	0x2000004c

0800064c <Definir_Estado>:





uint8_t Definir_Estado(int16_t Temp){
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	uint8_t Estado = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
	if (Temp>=Min_Temp_Critica) {
 800065a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065e:	2b27      	cmp	r3, #39	; 0x27
 8000660:	dd02      	ble.n	8000668 <Definir_Estado+0x1c>
		Estado = Estado_Critico;
 8000662:	2304      	movs	r3, #4
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e016      	b.n	8000696 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Alta) {
 8000668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066c:	2b1d      	cmp	r3, #29
 800066e:	dd02      	ble.n	8000676 <Definir_Estado+0x2a>
		Estado = Estado_Alto;
 8000670:	2303      	movs	r3, #3
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e00f      	b.n	8000696 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Media) {
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	2b0e      	cmp	r3, #14
 800067c:	dd02      	ble.n	8000684 <Definir_Estado+0x38>
		Estado = Estado_Medio;
 800067e:	2302      	movs	r3, #2
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	e008      	b.n	8000696 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Baja) {
 8000684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db02      	blt.n	8000692 <Definir_Estado+0x46>
		Estado = Estado_Bajo;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e001      	b.n	8000696 <Definir_Estado+0x4a>
	} else {
		Estado = Estado_Bajo_Cero;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
	}

	return Estado;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <Activar_Estado_Critico>:


void Activar_Estado_Critico (delay_t * delay){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	if (delayReadState(delay)) {
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f90b 	bl	80008c8 <delayReadState>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d008      	beq.n	80006ca <Activar_Estado_Critico+0x26>
		BSP_LED_Toggle(LED1);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fed3 	bl	8001464 <BSP_LED_Toggle>
		BSP_LED_Toggle(LED2);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 fed0 	bl	8001464 <BSP_LED_Toggle>
		BSP_LED_Toggle(LED3);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f000 fecd 	bl	8001464 <BSP_LED_Toggle>
//		Buzzer_toggle();
	}

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <Activar_Estado_Alto>:
void Activar_Estado_Alto(void){
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fe90 	bl	80013fc <BSP_LED_On>
	BSP_LED_On(LED2);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 fe8d 	bl	80013fc <BSP_LED_On>
	BSP_LED_On(LED3);
 80006e2:	2002      	movs	r0, #2
 80006e4:	f000 fe8a 	bl	80013fc <BSP_LED_On>
//	Buzzer_write(GPIO_PIN_RESET);
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Activar_Estado_Medio>:
void Activar_Estado_Medio(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fe83 	bl	80013fc <BSP_LED_On>
	BSP_LED_On(LED2);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fe80 	bl	80013fc <BSP_LED_On>
	BSP_LED_Off(LED3);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 fe97 	bl	8001430 <BSP_LED_Off>
//	Buzzer_write(GPIO_PIN_RESET);
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}

08000706 <Activar_Estado_Bajo>:
void Activar_Estado_Bajo(void){
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fe76 	bl	80013fc <BSP_LED_On>
	BSP_LED_Off(LED2);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fe8d 	bl	8001430 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fe8a 	bl	8001430 <BSP_LED_Off>
//	Buzzer_write(GPIO_PIN_RESET);
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <Activar_Estado_Bajo_Cero>:
void Activar_Estado_Bajo_Cero(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fe83 	bl	8001430 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fe80 	bl	8001430 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000730:	2002      	movs	r0, #2
 8000732:	f000 fe7d 	bl	8001430 <BSP_LED_Off>
//	Buzzer_write(GPIO_PIN_SET);
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <debounceFSM_init>:
// P4_2 - Variable de estado (global)
static debounceState_t curr_state;

static bool_t pending_pressed;

void debounceFSM_init(void){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	curr_state = BUTTON_UP;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <debounceFSM_init+0x28>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	BSP_LED_Off(LED1);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fe72 	bl	8001430 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 800074c:	2002      	movs	r0, #2
 800074e:	f000 fe6f 	bl	8001430 <BSP_LED_Off>
	delayInit(&bounce_delay, TIME_DEBOUNCE);
 8000752:	2128      	movs	r1, #40	; 0x28
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <debounceFSM_init+0x2c>)
 8000756:	f000 f899 	bl	800088c <delayInit>
	pending_pressed = false;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <debounceFSM_init+0x30>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000006c 	.word	0x2000006c
 8000768:	20000060 	.word	0x20000060
 800076c:	2000006d 	.word	0x2000006d

08000770 <debounceFSM_update>:


void debounceFSM_update(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	switch (curr_state) {
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <debounceFSM_update+0xc8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d851      	bhi.n	8000820 <debounceFSM_update+0xb0>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <debounceFSM_update+0x14>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000795 	.word	0x08000795
 8000788:	080007af 	.word	0x080007af
 800078c:	080007db 	.word	0x080007db
 8000790:	080007f5 	.word	0x080007f5
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER) == BOT_OFF) {
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fed5 	bl	8001544 <BSP_PB_GetState>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d142      	bne.n	8000826 <debounceFSM_update+0xb6>
			delayReadState(&bounce_delay);
 80007a0:	4826      	ldr	r0, [pc, #152]	; (800083c <debounceFSM_update+0xcc>)
 80007a2:	f000 f891 	bl	80008c8 <delayReadState>
			curr_state = BUTTON_FALLING;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <debounceFSM_update+0xc8>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007ac:	e03b      	b.n	8000826 <debounceFSM_update+0xb6>

	case BUTTON_FALLING:
		if (delayReadState(&bounce_delay)) {
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <debounceFSM_update+0xcc>)
 80007b0:	f000 f88a 	bl	80008c8 <delayReadState>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d037      	beq.n	800082a <debounceFSM_update+0xba>
			if (BSP_PB_GetState(BUTTON_USER) == BOT_OFF) {
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fec2 	bl	8001544 <BSP_PB_GetState>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d105      	bne.n	80007d2 <debounceFSM_update+0x62>
				curr_state = BUTTON_DOWN;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <debounceFSM_update+0xc8>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 80007cc:	f000 f838 	bl	8000840 <buttonPressed>
			} else {
				curr_state = BUTTON_UP;
			}
		}
		break;
 80007d0:	e02b      	b.n	800082a <debounceFSM_update+0xba>
				curr_state = BUTTON_UP;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <debounceFSM_update+0xc8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
		break;
 80007d8:	e027      	b.n	800082a <debounceFSM_update+0xba>

	case BUTTON_DOWN:
		if (BSP_PB_GetState(BUTTON_USER) == BOT_ON) {
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 feb2 	bl	8001544 <BSP_PB_GetState>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d123      	bne.n	800082e <debounceFSM_update+0xbe>
			delayReadState(&bounce_delay);
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <debounceFSM_update+0xcc>)
 80007e8:	f000 f86e 	bl	80008c8 <delayReadState>
			curr_state = BUTTON_RAISING;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <debounceFSM_update+0xc8>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007f2:	e01c      	b.n	800082e <debounceFSM_update+0xbe>

	case BUTTON_RAISING:
		if (delayReadState(&bounce_delay)) {
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <debounceFSM_update+0xcc>)
 80007f6:	f000 f867 	bl	80008c8 <delayReadState>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d018      	beq.n	8000832 <debounceFSM_update+0xc2>
			if (BSP_PB_GetState(BUTTON_USER) == BOT_ON) {
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fe9f 	bl	8001544 <BSP_PB_GetState>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d105      	bne.n	8000818 <debounceFSM_update+0xa8>
				curr_state = BUTTON_UP;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <debounceFSM_update+0xc8>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000812:	f000 f821 	bl	8000858 <buttonReleased>
			} else {
				curr_state = BUTTON_DOWN;
			}
		}
		break;
 8000816:	e00c      	b.n	8000832 <debounceFSM_update+0xc2>
				curr_state = BUTTON_DOWN;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <debounceFSM_update+0xc8>)
 800081a:	2202      	movs	r2, #2
 800081c:	701a      	strb	r2, [r3, #0]
		break;
 800081e:	e008      	b.n	8000832 <debounceFSM_update+0xc2>
	default:
		//Si algo modificó la variable estadoActual
		// a un estado no válido llevo la MEF a un
		// lugar seguro, por ejemplo, la reinicio:
		//controlDeErrores();
		debounceFSM_init();
 8000820:	f7ff ff8c 	bl	800073c <debounceFSM_init>
		break;
 8000824:	e006      	b.n	8000834 <debounceFSM_update+0xc4>
		break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <debounceFSM_update+0xc4>
		break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <debounceFSM_update+0xc4>
		break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <debounceFSM_update+0xc4>
		break;
 8000832:	bf00      	nop
	}
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000006c 	.word	0x2000006c
 800083c:	20000060 	.word	0x20000060

08000840 <buttonPressed>:


static void buttonPressed(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED1);
 8000844:	2000      	movs	r0, #0
 8000846:	f000 fe0d 	bl	8001464 <BSP_LED_Toggle>
	pending_pressed = true;
 800084a:	4b02      	ldr	r3, [pc, #8]	; (8000854 <buttonPressed+0x14>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000006d 	.word	0x2000006d

08000858 <buttonReleased>:


static void buttonReleased(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED3);
 800085c:	2002      	movs	r0, #2
 800085e:	f000 fe01 	bl	8001464 <BSP_LED_Toggle>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <readKey>:

bool readKey(void){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
	bool_t pending_aux;

	pending_aux = pending_pressed;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <readKey+0x20>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
	pending_pressed = false;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <readKey+0x20>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]

	return pending_aux;
 800087a:	79fb      	ldrb	r3, [r7, #7]
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	2000006d 	.word	0x2000006d

0800088c <delayInit>:
#define MAX_duration 3600000 //1 hora


/*delayInit debe cargar el valor de duración del retardo en la estructura, en el campo correspondiente.
 No debe iniciar el conteo del retardo. Debe inicializar el flag running en `false´.*/
void delayInit( delay_t * delay, tick_t duration ){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	if (delay!=0 && duration<MAX_duration && duration>0) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00d      	beq.n	80008b8 <delayInit+0x2c>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <delayInit+0x38>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d209      	bcs.n	80008b8 <delayInit+0x2c>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d006      	beq.n	80008b8 <delayInit+0x2c>
		delay->duration = duration;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	605a      	str	r2, [r3, #4]
		delay->running = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	721a      	strb	r2, [r3, #8]
	}else{
		while(1);
	}

}
 80008b6:	e000      	b.n	80008ba <delayInit+0x2e>
		while(1);
 80008b8:	e7fe      	b.n	80008b8 <delayInit+0x2c>
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	0036ee80 	.word	0x0036ee80

080008c8 <delayReadState>:


/*La siguiente funcion debe verificar el estado del flag running. si es false, debe tomar marca de tiempo y cambiar
 running a ‘true’. Si es true, debe hacer la cuenta para saber si el tiempo del retardo se cumplió o no y devolver
 'true' o 'false' respectivamente. */
bool_t delayReadState( delay_t * delay ){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (delay!=0){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d023      	beq.n	800091e <delayReadState+0x56>
		if (!delay->running){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7a1b      	ldrb	r3, [r3, #8]
 80008da:	f083 0301 	eor.w	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00a      	beq.n	80008fa <delayReadState+0x32>
			delay->startTime=HAL_GetTick();
 80008e4:	f000 fee6 	bl	80016b4 <HAL_GetTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	601a      	str	r2, [r3, #0]
			delay->running=1;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2201      	movs	r2, #1
 80008f4:	721a      	strb	r2, [r3, #8]
				return true;
			}else{
				return false;
			}
		}
		return false;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e012      	b.n	8000920 <delayReadState+0x58>
			if(HAL_GetTick()-delay->startTime >= delay->duration){
 80008fa:	f000 fedb 	bl	80016b4 <HAL_GetTick>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1ad2      	subs	r2, r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	d304      	bcc.n	800091a <delayReadState+0x52>
				delay->running=0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	721a      	strb	r2, [r3, #8]
				return true;
 8000916:	2301      	movs	r3, #1
 8000918:	e002      	b.n	8000920 <delayReadState+0x58>
				return false;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <delayReadState+0x58>
	}else{
		while(1);
 800091e:	e7fe      	b.n	800091e <delayReadState+0x56>
	}
	return false;
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <uartInit>:
#define MAX_Size_String_UART 100 //Solo se enviara como maximo MAX_Size_String_UART caracteres

/* UART handler declaration */
UART_HandleTypeDef UartHandle;

bool uartInit(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
						  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
		  - Stop Bit    = One Stop bit
		  - Parity      = ODD parity
		  - BaudRate    = 9600 baud
		  - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <uartInit+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <uartInit+0x54>)
 8000930:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = BaudVel;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <uartInit+0x50>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <uartInit+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <uartInit+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <uartInit+0x50>)
 8000948:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800094c:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <uartInit+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <uartInit+0x50>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <uartInit+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <uartInit+0x50>)
 8000962:	f002 fe99 	bl	8003698 <HAL_UART_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <uartInit+0x48>
	  {
		return false;
 800096c:	2300      	movs	r3, #0
 800096e:	e000      	b.n	8000972 <uartInit+0x4a>
	  }
	  return true;
 8000970:	2301      	movs	r3, #1
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000070 	.word	0x20000070
 800097c:	40004800 	.word	0x40004800

08000980 <uartSendString>:



void uartSendString(uint8_t * pstring){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	uint8_t * aux_string = pstring;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60fb      	str	r3, [r7, #12]
	uint8_t size_string = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	72fb      	strb	r3, [r7, #11]
	while(*aux_string != 0){
 8000990:	e008      	b.n	80009a4 <uartSendString+0x24>
		size_string++;
 8000992:	7afb      	ldrb	r3, [r7, #11]
 8000994:	3301      	adds	r3, #1
 8000996:	72fb      	strb	r3, [r7, #11]
		aux_string++;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
		if (size_string>=MAX_Size_String_UART) {
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	2b63      	cmp	r3, #99	; 0x63
 80009a2:	d804      	bhi.n	80009ae <uartSendString+0x2e>
	while(*aux_string != 0){
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f2      	bne.n	8000992 <uartSendString+0x12>
 80009ac:	e000      	b.n	80009b0 <uartSendString+0x30>
			break;
 80009ae:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&UartHandle, pstring , size_string, Timeout_UART);
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <uartSendString+0x48>)
 80009bc:	f002 feb9 	bl	8003732 <HAL_UART_Transmit>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000070 	.word	0x20000070

080009cc <uartReceiveStringSize>:

void uartSendStringSize(uint8_t * pstring, uint16_t size){
	HAL_UART_Transmit(&UartHandle, pstring , size, Timeout_UART);
}

HAL_StatusTypeDef uartReceiveStringSize(uint8_t * pstring, uint16_t size){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Receive(&UartHandle, pstring, 100, 1000);
 80009d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009dc:	2264      	movs	r2, #100	; 0x64
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <uartReceiveStringSize+0x24>)
 80009e2:	f002 ff38 	bl	8003856 <HAL_UART_Receive>
 80009e6:	4603      	mov	r3, r0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000070 	.word	0x20000070

080009f4 <SensorTemp_Init>:
#include <stdlib.h>
#include "API_uart.h"

uint8_t msg[2] = {'a','b'};

void SensorTemp_Init(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	uartInit();
 80009f8:	f7ff ff96 	bl	8000928 <uartInit>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SensorTemp_Read>:


int8_t SensorTemp_Read(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

	uartReceiveStringSize((uint8_t *) msg, 2);
 8000a04:	2102      	movs	r1, #2
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <SensorTemp_Read+0x20>)
 8000a08:	f7ff ffe0 	bl	80009cc <uartReceiveStringSize>
	uartSendString((uint8_t *) msg);
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <SensorTemp_Read+0x20>)
 8000a0e:	f7ff ffb7 	bl	8000980 <uartSendString>
	return str_to_decimal((const char *) msg);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <SensorTemp_Read+0x20>)
 8000a14:	f000 f806 	bl	8000a24 <str_to_decimal>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b25b      	sxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000

08000a24 <str_to_decimal>:



int str_to_decimal(const char *s)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    const char *digits = "0123456789";
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <str_to_decimal+0x94>)
 8000a2e:	60bb      	str	r3, [r7, #8]
    int result = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
    bool flagNegativo = false;
 8000a34:	2300      	movs	r3, #0
 8000a36:	74fb      	strb	r3, [r7, #19]
    if (*s == '-') {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b2d      	cmp	r3, #45	; 0x2d
 8000a3e:	d12a      	bne.n	8000a96 <str_to_decimal+0x72>
    	flagNegativo = true;
 8000a40:	2301      	movs	r3, #1
 8000a42:	74fb      	strb	r3, [r7, #19]
	}

    for (; *s; ++s) {
 8000a44:	e027      	b.n	8000a96 <str_to_decimal+0x72>
        int digit_val;

        /* Find the index of the digit (equivalent to its numeric value) */
        for (digit_val = 0; digits[digit_val]; ++digit_val) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e00a      	b.n	8000a62 <str_to_decimal+0x3e>
            if (digits[digit_val] == *s)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d009      	beq.n	8000a70 <str_to_decimal+0x4c>
        for (digit_val = 0; digits[digit_val]; ++digit_val) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ee      	bne.n	8000a4c <str_to_decimal+0x28>
 8000a6e:	e000      	b.n	8000a72 <str_to_decimal+0x4e>
                break;
 8000a70:	bf00      	nop
        }

        /* Only process recognized digits */
        if (digits[digit_val])
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d008      	beq.n	8000a90 <str_to_decimal+0x6c>
            result = 10 * result + digit_val;
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
    for (; *s; ++s) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1d3      	bne.n	8000a46 <str_to_decimal+0x22>
    }

    if (flagNegativo) {
 8000a9e:	7cfb      	ldrb	r3, [r7, #19]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <str_to_decimal+0x86>
		result = -result;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	617b      	str	r3, [r7, #20]
	}

    return result;
 8000aaa:	697b      	ldr	r3, [r7, #20]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	080045d4 	.word	0x080045d4

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 fd91 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f829 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 f989 	bl	8000de0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ace:	f000 f8e1 	bl	8000c94 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ad2:	f000 f92d 	bl	8000d30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ad6:	f000 f955 	bl	8000d84 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ada:	f000 f889 	bl	8000bf0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t AD_RES = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  ControlFSM_init();
 8000ae2:	f7ff fd05 	bl	80004f0 <ControlFSM_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ControlFSM_update();
 8000ae6:	f7ff fd33 	bl	8000550 <ControlFSM_update>
    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <main+0x5c>)
 8000aec:	f000 fe56 	bl	800179c <HAL_ADC_Start>
	 // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000af0:	2101      	movs	r1, #1
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <main+0x5c>)
 8000af4:	f000 ff24 	bl	8001940 <HAL_ADC_PollForConversion>
	 // Read The ADC Conversion Result & Map It To PWM DutyCycle
	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <main+0x5c>)
 8000afa:	f000 ffac 	bl	8001a56 <HAL_ADC_GetValue>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	80fb      	strh	r3, [r7, #6]
	  uartSendString((uint8_t *) &AD_RES);
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff3a 	bl	8000980 <uartSendString>
	  HAL_Delay(1000);
 8000b0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b10:	f000 fddc 	bl	80016cc <HAL_Delay>
  {
 8000b14:	e7e7      	b.n	8000ae6 <main+0x2a>
 8000b16:	bf00      	nop
 8000b18:	2000022c 	.word	0x2000022c

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fd3e 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <SystemClock_Config+0xd0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <SystemClock_Config+0xd0>)
 8000b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <SystemClock_Config+0xd0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b90:	23a8      	movs	r3, #168	; 0xa8
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 f8e1 	bl	8002d68 <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bac:	f000 f9d2 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2105      	movs	r1, #5
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fb42 	bl	8003258 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bda:	f000 f9bb 	bl	8000f54 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3750      	adds	r7, #80	; 0x50
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <MX_ADC1_Init+0x9c>)
 8000c06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <MX_ADC1_Init+0xa0>)
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c52:	f000 fd5f 	bl	8001714 <HAL_ADC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c5c:	f000 f97a 	bl	8000f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_ADC1_Init+0x98>)
 8000c72:	f000 fefd 	bl	8001a70 <HAL_ADC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f000 f96a 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000022c 	.word	0x2000022c
 8000c8c:	40012000 	.word	0x40012000
 8000c90:	0f000001 	.word	0x0f000001

08000c94 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_ETH_Init+0x84>)
 8000c9a:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <MX_ETH_Init+0x88>)
 8000c9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000cac:	22e1      	movs	r2, #225	; 0xe1
 8000cae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_ETH_Init+0x84>)
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <MX_ETH_Init+0x8c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_ETH_Init+0x84>)
 8000cca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_ETH_Init+0x84>)
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <MX_ETH_Init+0x90>)
 8000cd4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_ETH_Init+0x84>)
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_ETH_Init+0x94>)
 8000cda:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_ETH_Init+0x84>)
 8000cde:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ce2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_ETH_Init+0x84>)
 8000ce6:	f001 fa03 	bl	80020f0 <HAL_ETH_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000cf0:	f000 f930 	bl	8000f54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cf4:	2238      	movs	r2, #56	; 0x38
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_ETH_Init+0x98>)
 8000cfa:	f003 fc57 	bl	80045ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_ETH_Init+0x98>)
 8000d00:	2221      	movs	r2, #33	; 0x21
 8000d02:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_ETH_Init+0x98>)
 8000d06:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d0a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_ETH_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000274 	.word	0x20000274
 8000d1c:	40028000 	.word	0x40028000
 8000d20:	20000874 	.word	0x20000874
 8000d24:	2000018c 	.word	0x2000018c
 8000d28:	200000ec 	.word	0x200000ec
 8000d2c:	200000b4 	.word	0x200000b4

08000d30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_USART3_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART3_UART_Init+0x4c>)
 8000d68:	f002 fc96 	bl	8003698 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 f8ef 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000324 	.word	0x20000324
 8000d80:	40004800 	.word	0x40004800

08000d84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc8:	f001 feb1 	bl	8002b2e <HAL_PCD_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dd2:	f000 f8bf 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000368 	.word	0x20000368

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a51      	ldr	r2, [pc, #324]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a4a      	ldr	r2, [pc, #296]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a43      	ldr	r2, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a35      	ldr	r2, [pc, #212]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_GPIO_Init+0x164>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ea4:	4828      	ldr	r0, [pc, #160]	; (8000f48 <MX_GPIO_Init+0x168>)
 8000ea6:	f001 fe0f 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4827      	ldr	r0, [pc, #156]	; (8000f4c <MX_GPIO_Init+0x16c>)
 8000eb0:	f001 fe0a 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4821      	ldr	r0, [pc, #132]	; (8000f50 <MX_GPIO_Init+0x170>)
 8000ecc:	f001 fc38 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ed0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4817      	ldr	r0, [pc, #92]	; (8000f48 <MX_GPIO_Init+0x168>)
 8000eea:	f001 fc29 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <MX_GPIO_Init+0x16c>)
 8000f06:	f001 fc1b 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <MX_GPIO_Init+0x16c>)
 8000f1e:	f001 fc0f 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_GPIO_Init+0x170>)
 8000f38:	f001 fc02 	bl	8002740 <HAL_GPIO_Init>

}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	; 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40021800 	.word	0x40021800
 8000f50:	40020800 	.word	0x40020800

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_ADC_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0x84>)
 800101e:	f001 fb8f 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40012000 	.word	0x40012000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_ETH_MspInit+0x174>)
 8001056:	4293      	cmp	r3, r2
 8001058:	f040 80a4 	bne.w	80011a4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 8001066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 8001082:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800109e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a36      	ldr	r2, [pc, #216]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 800110e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_ETH_MspInit+0x178>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001120:	2332      	movs	r3, #50	; 0x32
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001130:	230b      	movs	r3, #11
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	481e      	ldr	r0, [pc, #120]	; (80011b4 <HAL_ETH_MspInit+0x17c>)
 800113c:	f001 fb00 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001140:	2386      	movs	r3, #134	; 0x86
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001150:	230b      	movs	r3, #11
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4817      	ldr	r0, [pc, #92]	; (80011b8 <HAL_ETH_MspInit+0x180>)
 800115c:	f001 faf0 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <HAL_ETH_MspInit+0x184>)
 800117e:	f001 fadf 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001182:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001194:	230b      	movs	r3, #11
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <HAL_ETH_MspInit+0x188>)
 80011a0:	f001 face 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3738      	adds	r7, #56	; 0x38
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40028000 	.word	0x40028000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40021800 	.word	0x40021800

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_UART_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12c      	bne.n	8001240 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x88>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_MspInit+0x88>)
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_UART_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800121e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001230:	2307      	movs	r3, #7
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0x8c>)
 800123c:	f001 fa80 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40004800 	.word	0x40004800
 800124c:	40023800 	.word	0x40023800
 8001250:	40020c00 	.word	0x40020c00

08001254 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001274:	d13f      	bne.n	80012f6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_PCD_MspInit+0xac>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_PCD_MspInit+0xac>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_PCD_MspInit+0xac>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001292:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012a4:	230a      	movs	r3, #10
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <HAL_PCD_MspInit+0xb0>)
 80012b0:	f001 fa46 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <HAL_PCD_MspInit+0xb0>)
 80012ca:	f001 fa39 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_PCD_MspInit+0xac>)
 80012d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_PCD_MspInit+0xac>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6353      	str	r3, [r2, #52]	; 0x34
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_PCD_MspInit+0xac>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_PCD_MspInit+0xac>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_PCD_MspInit+0xac>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f99a 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10e      	bne.n	800138a <BSP_LED_Init+0x2e>
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <BSP_LED_Init+0x94>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <BSP_LED_Init+0x94>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <BSP_LED_Init+0x94>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	e00d      	b.n	80013a6 <BSP_LED_Init+0x4a>
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <BSP_LED_Init+0x94>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <BSP_LED_Init+0x94>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <BSP_LED_Init+0x94>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <BSP_LED_Init+0x98>)
 80013aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <BSP_LED_Init+0x9c>)
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	f107 0214 	add.w	r2, r7, #20
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 f9b8 	bl	8002740 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <BSP_LED_Init+0x9c>)
 80013d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <BSP_LED_Init+0x98>)
 80013dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f001 fb70 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	080045e0 	.word	0x080045e0
 80013f8:	20000004 	.word	0x20000004

080013fc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <BSP_LED_On+0x2c>)
 800140a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <BSP_LED_On+0x30>)
 8001412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001416:	2201      	movs	r2, #1
 8001418:	4619      	mov	r1, r3
 800141a:	f001 fb55 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000004 	.word	0x20000004
 800142c:	080045e0 	.word	0x080045e0

08001430 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <BSP_LED_Off+0x2c>)
 800143e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <BSP_LED_Off+0x30>)
 8001446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	f001 fb3b 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000004 	.word	0x20000004
 8001460:	080045e0 	.word	0x080045e0

08001464 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <BSP_LED_Toggle+0x2c>)
 8001472:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <BSP_LED_Toggle+0x30>)
 800147a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f001 fb3a 	bl	8002afa <HAL_GPIO_TogglePin>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000004 	.word	0x20000004
 8001494:	080045e0 	.word	0x080045e0

08001498 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <BSP_PB_Init+0xa4>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <BSP_PB_Init+0xa4>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <BSP_PB_Init+0xa4>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d112      	bne.n	80014f0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d4:	2302      	movs	r3, #2
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <BSP_PB_Init+0xa8>)
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	f107 020c 	add.w	r2, r7, #12
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f928 	bl	8002740 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11d      	bne.n	8001532 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001500:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001504:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <BSP_PB_Init+0xa8>)
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f001 f913 	bl	8002740 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800151a:	2328      	movs	r3, #40	; 0x28
 800151c:	b25b      	sxtb	r3, r3
 800151e:	2200      	movs	r2, #0
 8001520:	210f      	movs	r1, #15
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fdad 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001528:	2328      	movs	r3, #40	; 0x28
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fdc4 	bl	80020ba <HAL_NVIC_EnableIRQ>
  }
}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	20000010 	.word	0x20000010

08001544 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <BSP_PB_GetState+0x28>)
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fa9b 	bl	8002a98 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000010 	.word	0x20000010

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <SystemInit+0x20>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <SystemInit+0x20>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800159a:	490e      	ldr	r1, [pc, #56]	; (80015d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b0:	4c0b      	ldr	r4, [pc, #44]	; (80015e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015be:	f7ff ffd7 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f002 ffcf 	bl	8004564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff fa79 	bl	8000abc <main>
  bx  lr    
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80015d8:	08004610 	.word	0x08004610
  ldr r2, =_sbss
 80015dc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015e0:	20000880 	.word	0x20000880

080015e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <HAL_Init+0x40>)
 80015f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_Init+0x40>)
 80015fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_Init+0x40>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 fd2b 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	2000      	movs	r0, #0
 8001618:	f000 f808 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fca0 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023c00 	.word	0x40023c00

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x54>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x58>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fd43 	bl	80020d6 <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 fd0b 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <HAL_InitTick+0x5c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000014 	.word	0x20000014
 8001684:	2000001c 	.word	0x2000001c
 8001688:	20000018 	.word	0x20000018

0800168c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2000001c 	.word	0x2000001c
 80016b0:	2000087c 	.word	0x2000087c

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_GetTick+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	2000087c 	.word	0x2000087c

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffee 	bl	80016b4 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000001c 	.word	0x2000001c

08001714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e033      	b.n	8001792 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fc3c 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175a:	f023 0302 	bic.w	r3, r3, #2
 800175e:	f043 0202 	orr.w	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fab4 	bl	8001cd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
 8001782:	e001      	b.n	8001788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Start+0x1a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e0b2      	b.n	800191c <HAL_ADC_Start+0x180>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d018      	beq.n	80017fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017dc:	4b52      	ldr	r3, [pc, #328]	; (8001928 <HAL_ADC_Start+0x18c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_ADC_Start+0x190>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0c9a      	lsrs	r2, r3, #18
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d17a      	bne.n	8001902 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001836:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184a:	d106      	bne.n	800185a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	f023 0206 	bic.w	r2, r3, #6
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	645a      	str	r2, [r3, #68]	; 0x44
 8001858:	e002      	b.n	8001860 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_ADC_Start+0x194>)
 800186a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001874:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2b00      	cmp	r3, #0
 8001880:	d12a      	bne.n	80018d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_ADC_Start+0x198>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d015      	beq.n	80018b8 <HAL_ADC_Start+0x11c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a29      	ldr	r2, [pc, #164]	; (8001938 <HAL_ADC_Start+0x19c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d105      	bne.n	80018a2 <HAL_ADC_Start+0x106>
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_ADC_Start+0x194>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <HAL_ADC_Start+0x1a0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d136      	bne.n	800191a <HAL_ADC_Start+0x17e>
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_ADC_Start+0x194>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d130      	bne.n	800191a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d129      	bne.n	800191a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	e020      	b.n	800191a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a15      	ldr	r2, [pc, #84]	; (8001934 <HAL_ADC_Start+0x198>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11b      	bne.n	800191a <HAL_ADC_Start+0x17e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d114      	bne.n	800191a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	e00b      	b.n	800191a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000014 	.word	0x20000014
 800192c:	431bde83 	.word	0x431bde83
 8001930:	40012300 	.word	0x40012300
 8001934:	40012000 	.word	0x40012000
 8001938:	40012100 	.word	0x40012100
 800193c:	40012200 	.word	0x40012200

08001940 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d113      	bne.n	8001986 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196c:	d10b      	bne.n	8001986 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f043 0220 	orr.w	r2, r3, #32
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e063      	b.n	8001a4e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001986:	f7ff fe95 	bl	80016b4 <HAL_GetTick>
 800198a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800198c:	e021      	b.n	80019d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d01d      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_ADC_PollForConversion+0x6c>
 800199c:	f7ff fe8a 	bl	80016b4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d212      	bcs.n	80019d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d00b      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f043 0204 	orr.w	r2, r3, #4
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e03d      	b.n	8001a4e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d1d6      	bne.n	800198e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0212 	mvn.w	r2, #18
 80019e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d123      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11f      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d111      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1c>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e113      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x244>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b09      	cmp	r3, #9
 8001a9a:	d925      	bls.n	8001ae8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68d9      	ldr	r1, [r3, #12]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b1e      	subs	r3, #30
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	400a      	ands	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68d9      	ldr	r1, [r3, #12]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4403      	add	r3, r0
 8001ada:	3b1e      	subs	r3, #30
 8001adc:	409a      	lsls	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	e022      	b.n	8001b2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6919      	ldr	r1, [r3, #16]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	2207      	movs	r2, #7
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	400a      	ands	r2, r1
 8001b0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6919      	ldr	r1, [r3, #16]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4403      	add	r3, r0
 8001b24:	409a      	lsls	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d824      	bhi.n	8001b80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b05      	subs	r3, #5
 8001b48:	221f      	movs	r2, #31
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	400a      	ands	r2, r1
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b05      	subs	r3, #5
 8001b72:	fa00 f203 	lsl.w	r2, r0, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7e:	e04c      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d824      	bhi.n	8001bd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b23      	subs	r3, #35	; 0x23
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b23      	subs	r3, #35	; 0x23
 8001bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd0:	e023      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b41      	subs	r3, #65	; 0x41
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b41      	subs	r3, #65	; 0x41
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_ADC_ConfigChannel+0x250>)
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <HAL_ADC_ConfigChannel+0x254>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10f      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d8>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d10b      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_ADC_ConfigChannel+0x254>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d12b      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x23a>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_ADC_ConfigChannel+0x258>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0x1f4>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b11      	cmp	r3, #17
 8001c62:	d122      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_ADC_ConfigChannel+0x258>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d111      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_ADC_ConfigChannel+0x25c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_ADC_ConfigChannel+0x260>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9a      	lsrs	r2, r3, #18
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	10000012 	.word	0x10000012
 8001ccc:	20000014 	.word	0x20000014
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cdc:	4b79      	ldr	r3, [pc, #484]	; (8001ec4 <ADC_Init+0x1f0>)
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	021a      	lsls	r2, r3, #8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <ADC_Init+0x1f4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6899      	ldr	r1, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	e00f      	b.n	8001dd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0202 	bic.w	r2, r2, #2
 8001de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6899      	ldr	r1, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7e1b      	ldrb	r3, [r3, #24]
 8001dec:	005a      	lsls	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	035a      	lsls	r2, r3, #13
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	e007      	b.n	8001e48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	051a      	lsls	r2, r3, #20
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e8a:	025a      	lsls	r2, r3, #9
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	029a      	lsls	r2, r3, #10
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40012300 	.word	0x40012300
 8001ec8:	0f000001 	.word	0x0f000001

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff3e 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff31 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06c      	b.n	80021dc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2223      	movs	r2, #35	; 0x23
 8002110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe ff8f 	bl	8001038 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_ETH_Init+0xf4>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <HAL_ETH_Init+0xf4>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_ETH_Init+0xf4>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_ETH_Init+0xf8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <HAL_ETH_Init+0xf8>)
 800213c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002140:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_ETH_Init+0xf8>)
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_ETH_Init+0xf8>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_ETH_Init+0xf8>)
 8002152:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff faa2 	bl	80016b4 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002172:	e011      	b.n	8002198 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002174:	f7ff fa9e 	bl	80016b4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002182:	d909      	bls.n	8002198 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	22e0      	movs	r2, #224	; 0xe0
 8002190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e021      	b.n	80021dc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1e4      	bne.n	8002174 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f958 	bl	8002460 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f9ff 	bl	80025b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa55 	bl	8002666 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	461a      	mov	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f9bd 	bl	8002544 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2210      	movs	r2, #16
 80021d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800

080021ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4b51      	ldr	r3, [pc, #324]	; (8002348 <ETH_SetMACConfig+0x15c>)
 8002202:	4013      	ands	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	7c1b      	ldrb	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <ETH_SetMACConfig+0x28>
 800220e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002212:	e000      	b.n	8002216 <ETH_SetMACConfig+0x2a>
 8002214:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	7c5b      	ldrb	r3, [r3, #17]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <ETH_SetMACConfig+0x38>
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	e000      	b.n	8002226 <ETH_SetMACConfig+0x3a>
 8002224:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002226:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800222c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	7fdb      	ldrb	r3, [r3, #31]
 8002232:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002234:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800223a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	7f92      	ldrb	r2, [r2, #30]
 8002240:	2a00      	cmp	r2, #0
 8002242:	d102      	bne.n	800224a <ETH_SetMACConfig+0x5e>
 8002244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002248:	e000      	b.n	800224c <ETH_SetMACConfig+0x60>
 800224a:	2200      	movs	r2, #0
                        macconf->Speed |
 800224c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	7f1b      	ldrb	r3, [r3, #28]
 8002252:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002254:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800225a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	791b      	ldrb	r3, [r3, #4]
 8002260:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002262:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	f892 2020 	ldrb.w	r2, [r2, #32]
 800226a:	2a00      	cmp	r2, #0
 800226c:	d102      	bne.n	8002274 <ETH_SetMACConfig+0x88>
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	e000      	b.n	8002276 <ETH_SetMACConfig+0x8a>
 8002274:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002276:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	7bdb      	ldrb	r3, [r3, #15]
 800227c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800227e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002284:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800228c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800228e:	4313      	orrs	r3, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7ff fa10 	bl	80016cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022c2:	4013      	ands	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022d2:	2a00      	cmp	r2, #0
 80022d4:	d101      	bne.n	80022da <ETH_SetMACConfig+0xee>
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0xf0>
 80022da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022ea:	2a01      	cmp	r2, #1
 80022ec:	d101      	bne.n	80022f2 <ETH_SetMACConfig+0x106>
 80022ee:	2208      	movs	r2, #8
 80022f0:	e000      	b.n	80022f4 <ETH_SetMACConfig+0x108>
 80022f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80022fc:	2a01      	cmp	r2, #1
 80022fe:	d101      	bne.n	8002304 <ETH_SetMACConfig+0x118>
 8002300:	2204      	movs	r2, #4
 8002302:	e000      	b.n	8002306 <ETH_SetMACConfig+0x11a>
 8002304:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800230e:	2a01      	cmp	r2, #1
 8002310:	d101      	bne.n	8002316 <ETH_SetMACConfig+0x12a>
 8002312:	2202      	movs	r2, #2
 8002314:	e000      	b.n	8002318 <ETH_SetMACConfig+0x12c>
 8002316:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002318:	4313      	orrs	r3, r2
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff f9cb 	bl	80016cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	ff20810f 	.word	0xff20810f

0800234c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <ETH_SetDMAConfig+0x110>)
 8002366:	4013      	ands	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	7b1b      	ldrb	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <ETH_SetDMAConfig+0x2c>
 8002372:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002376:	e000      	b.n	800237a <ETH_SetDMAConfig+0x2e>
 8002378:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	7b5b      	ldrb	r3, [r3, #13]
 800237e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002380:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	7f52      	ldrb	r2, [r2, #29]
 8002386:	2a00      	cmp	r2, #0
 8002388:	d102      	bne.n	8002390 <ETH_SetDMAConfig+0x44>
 800238a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800238e:	e000      	b.n	8002392 <ETH_SetDMAConfig+0x46>
 8002390:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002392:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7b9b      	ldrb	r3, [r3, #14]
 8002398:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800239a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7f1b      	ldrb	r3, [r3, #28]
 80023a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7f9b      	ldrb	r3, [r3, #30]
 80023ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023c0:	4313      	orrs	r3, r2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f7ff f972 	bl	80016cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f0:	461a      	mov	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002400:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002406:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800240c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002414:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002416:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800241e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002424:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800242e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002432:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002440:	2001      	movs	r0, #1
 8002442:	f7ff f943 	bl	80016cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	f8de3f23 	.word	0xf8de3f23

08002460 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0a6      	sub	sp, #152	; 0x98
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800249c:	2300      	movs	r3, #0
 800249e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe86 	bl	80021ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800250c:	2301      	movs	r3, #1
 800250e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002514:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800251a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800251c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002520:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002528:	2300      	movs	r3, #0
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff08 	bl	800234c <ETH_SetDMAConfig>
}
 800253c:	bf00      	nop
 800253e:	3798      	adds	r7, #152	; 0x98
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3305      	adds	r3, #5
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	3204      	adds	r2, #4
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <ETH_MACAddressConfig+0x68>)
 8002566:	4413      	add	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3303      	adds	r3, #3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	061a      	lsls	r2, r3, #24
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3302      	adds	r3, #2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3301      	adds	r3, #1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	4313      	orrs	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <ETH_MACAddressConfig+0x6c>)
 8002596:	4413      	add	r3, r2
 8002598:	461a      	mov	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6013      	str	r3, [r2, #0]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40028040 	.word	0x40028040
 80025b0:	40028044 	.word	0x40028044

080025b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e03e      	b.n	8002640 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	3206      	adds	r2, #6
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d80c      	bhi.n	8002624 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	e004      	b.n	800262e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d9bd      	bls.n	80025c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	611a      	str	r2, [r3, #16]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e046      	b.n	8002702 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6919      	ldr	r1, [r3, #16]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80026b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	3212      	adds	r2, #18
 80026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d80c      	bhi.n	80026f2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6919      	ldr	r1, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	e004      	b.n	80026fc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d9b5      	bls.n	8002674 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002732:	60da      	str	r2, [r3, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e177      	b.n	8002a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 8166 	bne.w	8002a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d005      	beq.n	8002792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	2b02      	cmp	r3, #2
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80c0 	beq.w	8002a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e2:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <HAL_GPIO_Init+0x328>)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_GPIO_Init+0x32c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d037      	beq.n	800297e <HAL_GPIO_Init+0x23e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_GPIO_Init+0x330>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_GPIO_Init+0x23a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_GPIO_Init+0x334>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02b      	beq.n	8002976 <HAL_GPIO_Init+0x236>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_GPIO_Init+0x338>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x232>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_GPIO_Init+0x33c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x22e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a53      	ldr	r2, [pc, #332]	; (8002a80 <HAL_GPIO_Init+0x340>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x22a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x344>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x226>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_GPIO_Init+0x348>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x222>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x21e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4f      	ldr	r2, [pc, #316]	; (8002a90 <HAL_GPIO_Init+0x350>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x21a>
 8002956:	2309      	movs	r3, #9
 8002958:	e012      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800295a:	230a      	movs	r3, #10
 800295c:	e010      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800295e:	2308      	movs	r3, #8
 8002960:	e00e      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002962:	2307      	movs	r3, #7
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002966:	2306      	movs	r3, #6
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002990:	4935      	ldr	r1, [pc, #212]	; (8002a68 <HAL_GPIO_Init+0x328>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ec:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_GPIO_Init+0x354>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_GPIO_Init+0x354>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_GPIO_Init+0x354>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f ae84 	bls.w	800275c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022400 	.word	0x40022400
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e001      	b.n	8002aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	041a      	lsls	r2, r3, #16
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b30:	b08f      	sub	sp, #60	; 0x3c
 8002b32:	af0a      	add	r7, sp, #40	; 0x28
 8002b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e10f      	b.n	8002d60 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fb7a 	bl	8001254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 fa4f 	bl	8004022 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	687e      	ldr	r6, [r7, #4]
 8002b8c:	466d      	mov	r5, sp
 8002b8e:	f106 0410 	add.w	r4, r6, #16
 8002b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ba2:	1d33      	adds	r3, r6, #4
 8002ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f001 f9da 	bl	8003f60 <USB_CoreInit>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0d0      	b.n	8002d60 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fa3d 	bl	8004044 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e04a      	b.n	8002c66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	333d      	adds	r3, #61	; 0x3d
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	333c      	adds	r3, #60	; 0x3c
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	b298      	uxth	r0, r3
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3344      	adds	r3, #68	; 0x44
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3340      	adds	r3, #64	; 0x40
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3348      	adds	r3, #72	; 0x48
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334c      	adds	r3, #76	; 0x4c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3354      	adds	r3, #84	; 0x54
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	3301      	adds	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3af      	bcc.n	8002bd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e044      	b.n	8002d00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d3b5      	bcc.n	8002c76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	687e      	ldr	r6, [r7, #4]
 8002d12:	466d      	mov	r5, sp
 8002d14:	f106 0410 	add.w	r4, r6, #16
 8002d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d28:	1d33      	adds	r3, r6, #4
 8002d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d2c:	6838      	ldr	r0, [r7, #0]
 8002d2e:	f001 f9d5 	bl	80040dc <USB_DevInit>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e00d      	b.n	8002d60 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fba0 	bl	800449e <USB_DevDisconnect>

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e267      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d075      	beq.n	8002e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d86:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00c      	beq.n	8002dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b85      	ldr	r3, [pc, #532]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e242      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x74>
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a75      	ldr	r2, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6f      	ldr	r2, [pc, #444]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6c      	ldr	r2, [pc, #432]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a68      	ldr	r2, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fc48 	bl	80016b4 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fc44 	bl	80016b4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e207      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fc34 	bl	80016b4 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fc30 	bl	80016b4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1f3      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c7      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x244>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe fbe9 	bl	80016b4 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fbe5 	bl	80016b4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a8      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4925      	ldr	r1, [pc, #148]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x244>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fbc8 	bl	80016b4 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fbc4 	bl	80016b4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e187      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d036      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe fba8 	bl	80016b4 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe fba4 	bl	80016b4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e167      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x200>
 8002f86:	e01b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fb91 	bl	80016b4 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	e00e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe fb8d 	bl	80016b4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d907      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e150      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470000 	.word	0x42470000
 8002fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ea      	bne.n	8002f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8097 	beq.w	80030fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b7d      	ldr	r3, [pc, #500]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a7c      	ldr	r2, [pc, #496]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b77      	ldr	r3, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b74      	ldr	r3, [pc, #464]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a73      	ldr	r2, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7fe fb4d 	bl	80016b4 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe fb49 	bl	80016b4 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e10c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x2ea>
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x30c>
 800305a:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	4b5c      	ldr	r3, [pc, #368]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003074:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fb0e 	bl	80016b4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe fb0a 	bl	80016b4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0cb      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCC_OscConfig+0x334>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe faf8 	bl	80016b4 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe faf4 	bl	80016b4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0b5      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a1 	beq.w	8003248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d05c      	beq.n	80031cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d141      	bne.n	800319e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fac8 	bl	80016b4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fac4 	bl	80016b4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e087      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	019b      	lsls	r3, r3, #6
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe fa9d 	bl	80016b4 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe fa99 	bl	80016b4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e05c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x416>
 800319c:	e054      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fa86 	bl	80016b4 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe fa82 	bl	80016b4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e045      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x444>
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e038      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x4ec>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d028      	beq.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d121      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cc      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d90c      	bls.n	8003294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ac:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	494d      	ldr	r1, [pc, #308]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d044      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e067      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe f9b4 	bl	80016b4 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe f9b0 	bl	80016b4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e032      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4916      	ldr	r1, [pc, #88]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033de:	f000 f821 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490a      	ldr	r1, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe f914 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00
 8003414:	40023800 	.word	0x40023800
 8003418:	080045e8 	.word	0x080045e8
 800341c:	20000014 	.word	0x20000014
 8003420:	20000018 	.word	0x20000018

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b094      	sub	sp, #80	; 0x50
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	647b      	str	r3, [r7, #68]	; 0x44
 8003430:	2300      	movs	r3, #0
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	2300      	movs	r3, #0
 8003436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343c:	4b79      	ldr	r3, [pc, #484]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d00d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x40>
 8003448:	2b08      	cmp	r3, #8
 800344a:	f200 80e1 	bhi.w	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x34>
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x3a>
 8003456:	e0db      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800345c:	e0db      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345e:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_GetSysClockFreq+0x208>)
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003462:	e0d8      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003464:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
 8003484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 800348e:	2300      	movs	r3, #0
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
 8003492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4621      	mov	r1, r4
 80034b0:	1a51      	subs	r1, r2, r1
 80034b2:	6139      	str	r1, [r7, #16]
 80034b4:	4629      	mov	r1, r5
 80034b6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	018b      	lsls	r3, r1, #6
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d2:	4651      	mov	r1, sl
 80034d4:	018a      	lsls	r2, r1, #6
 80034d6:	4651      	mov	r1, sl
 80034d8:	ebb2 0801 	subs.w	r8, r2, r1
 80034dc:	4659      	mov	r1, fp
 80034de:	eb63 0901 	sbc.w	r9, r3, r1
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f6:	4690      	mov	r8, r2
 80034f8:	4699      	mov	r9, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	eb18 0303 	adds.w	r3, r8, r3
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	462b      	mov	r3, r5
 8003504:	eb49 0303 	adc.w	r3, r9, r3
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003516:	4629      	mov	r1, r5
 8003518:	024b      	lsls	r3, r1, #9
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003520:	4621      	mov	r1, r4
 8003522:	024a      	lsls	r2, r1, #9
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003534:	f7fc fe5a 	bl	80001ec <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003540:	e058      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	2200      	movs	r2, #0
 800354a:	4618      	mov	r0, r3
 800354c:	4611      	mov	r1, r2
 800354e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356e:	0150      	lsls	r0, r2, #5
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4641      	mov	r1, r8
 8003576:	ebb2 0a01 	subs.w	sl, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800358c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003594:	ebb2 040a 	subs.w	r4, r2, sl
 8003598:	eb63 050b 	sbc.w	r5, r3, fp
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	00eb      	lsls	r3, r5, #3
 80035a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035aa:	00e2      	lsls	r2, r4, #3
 80035ac:	4614      	mov	r4, r2
 80035ae:	461d      	mov	r5, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	18e3      	adds	r3, r4, r3
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb45 0303 	adc.w	r3, r5, r3
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	61fa      	str	r2, [r7, #28]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	f7fc fe00 	bl	80001ec <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003618:	4618      	mov	r0, r3
 800361a:	3750      	adds	r7, #80	; 0x50
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000014 	.word	0x20000014

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800364c:	f7ff fff0 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0a9b      	lsrs	r3, r3, #10
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK1Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	080045f8 	.word	0x080045f8

08003670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003674:	f7ff ffdc 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0b5b      	lsrs	r3, r3, #13
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	080045f8 	.word	0x080045f8

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e03f      	b.n	800372a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fd80 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f9cb 	bl	8003a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	; 0x28
 8003736:	af02      	add	r7, sp, #8
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b20      	cmp	r3, #32
 8003750:	d17c      	bne.n	800384c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_Transmit+0x2c>
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e075      	b.n	800384e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit+0x3e>
 800376c:	2302      	movs	r3, #2
 800376e:	e06e      	b.n	800384e <HAL_UART_Transmit+0x11c>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2221      	movs	r2, #33	; 0x21
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003786:	f7fd ff95 	bl	80016b4 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	d108      	bne.n	80037b4 <HAL_UART_Transmit+0x82>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	e003      	b.n	80037bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037c4:	e02a      	b.n	800381c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f8e2 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e036      	b.n	800384e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	3302      	adds	r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e007      	b.n	800380e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	3301      	adds	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1cf      	bne.n	80037c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2140      	movs	r1, #64	; 0x40
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f8b2 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e006      	b.n	800384e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b08a      	sub	sp, #40	; 0x28
 800385a:	af02      	add	r7, sp, #8
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	f040 808c 	bne.w	8003990 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_UART_Receive+0x2e>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e084      	b.n	8003992 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_UART_Receive+0x40>
 8003892:	2302      	movs	r3, #2
 8003894:	e07d      	b.n	8003992 <HAL_UART_Receive+0x13c>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2222      	movs	r2, #34	; 0x22
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fd feff 	bl	80016b4 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Receive+0x8a>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038f0:	e043      	b.n	800397a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2120      	movs	r1, #32
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f84c 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e042      	b.n	8003992 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	b29a      	uxth	r2, r3
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3302      	adds	r3, #2
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e01f      	b.n	800396c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d007      	beq.n	8003946 <HAL_UART_Receive+0xf0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_UART_Receive+0xfe>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e008      	b.n	8003966 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	b2da      	uxtb	r2, r3
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3301      	adds	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1b6      	bne.n	80038f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b090      	sub	sp, #64	; 0x40
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039aa:	e050      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d04c      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0x30>
 80039ba:	f7fd fe7b 	bl	80016b4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d241      	bcs.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ea:	637a      	str	r2, [r7, #52]	; 0x34
 80039ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e5      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a1e:	623a      	str	r2, [r7, #32]
 8003a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	69f9      	ldr	r1, [r7, #28]
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e5      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e00f      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4013      	ands	r3, r2
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2300      	movne	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d09f      	beq.n	80039ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3740      	adds	r7, #64	; 0x40
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a7c:	b0c0      	sub	sp, #256	; 0x100
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	68d9      	ldr	r1, [r3, #12]
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	ea40 0301 	orr.w	r3, r0, r1
 8003aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ad0:	f021 010c 	bic.w	r1, r1, #12
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af2:	6999      	ldr	r1, [r3, #24]
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	ea40 0301 	orr.w	r3, r0, r1
 8003afe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <UART_SetConfig+0x2cc>)
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d005      	beq.n	8003b18 <UART_SetConfig+0xa0>
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b8d      	ldr	r3, [pc, #564]	; (8003d48 <UART_SetConfig+0x2d0>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d104      	bne.n	8003b22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7ff fdaa 	bl	8003670 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b20:	e003      	b.n	8003b2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b22:	f7ff fd91 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8003b26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	f040 810c 	bne.w	8003d50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	462b      	mov	r3, r5
 8003b4e:	1891      	adds	r1, r2, r2
 8003b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b52:	415b      	adcs	r3, r3
 8003b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	eb12 0801 	adds.w	r8, r2, r1
 8003b60:	4629      	mov	r1, r5
 8003b62:	eb43 0901 	adc.w	r9, r3, r1
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b7a:	4690      	mov	r8, r2
 8003b7c:	4699      	mov	r9, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	eb18 0303 	adds.w	r3, r8, r3
 8003b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b88:	462b      	mov	r3, r5
 8003b8a:	eb49 0303 	adc.w	r3, r9, r3
 8003b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	18db      	adds	r3, r3, r3
 8003baa:	653b      	str	r3, [r7, #80]	; 0x50
 8003bac:	4613      	mov	r3, r2
 8003bae:	eb42 0303 	adc.w	r3, r2, r3
 8003bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bbc:	f7fc fb16 	bl	80001ec <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <UART_SetConfig+0x2d4>)
 8003bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	011c      	lsls	r4, r3, #4
 8003bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	1891      	adds	r1, r2, r2
 8003be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003be8:	415b      	adcs	r3, r3
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c10:	4692      	mov	sl, r2
 8003c12:	469b      	mov	fp, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	eb1a 0303 	adds.w	r3, sl, r3
 8003c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	eb4b 0303 	adc.w	r3, fp, r3
 8003c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	18db      	adds	r3, r3, r3
 8003c40:	643b      	str	r3, [r7, #64]	; 0x40
 8003c42:	4613      	mov	r3, r2
 8003c44:	eb42 0303 	adc.w	r3, r2, r3
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
 8003c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c52:	f7fc facb 	bl	80001ec <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <UART_SetConfig+0x2d4>)
 8003c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2264      	movs	r2, #100	; 0x64
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	1acb      	subs	r3, r1, r3
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <UART_SetConfig+0x2d4>)
 8003c74:	fba3 2302 	umull	r2, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c80:	441c      	add	r4, r3
 8003c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	1891      	adds	r1, r2, r2
 8003c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c9c:	415b      	adcs	r3, r3
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	1851      	adds	r1, r2, r1
 8003ca8:	6339      	str	r1, [r7, #48]	; 0x30
 8003caa:	4649      	mov	r1, r9
 8003cac:	414b      	adcs	r3, r1
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	00cb      	lsls	r3, r1, #3
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	00ca      	lsls	r2, r1, #3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cd8:	464b      	mov	r3, r9
 8003cda:	460a      	mov	r2, r1
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	18db      	adds	r3, r3, r3
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfe:	4613      	mov	r3, r2
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d0e:	f7fc fa6d 	bl	80001ec <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <UART_SetConfig+0x2d4>)
 8003d18:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	3332      	adds	r3, #50	; 0x32
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <UART_SetConfig+0x2d4>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	f003 0207 	and.w	r2, r3, #7
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4422      	add	r2, r4
 8003d3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d40:	e105      	b.n	8003f4e <UART_SetConfig+0x4d6>
 8003d42:	bf00      	nop
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40011400 	.word	0x40011400
 8003d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d62:	4642      	mov	r2, r8
 8003d64:	464b      	mov	r3, r9
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	6239      	str	r1, [r7, #32]
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d72:	4641      	mov	r1, r8
 8003d74:	1854      	adds	r4, r2, r1
 8003d76:	4649      	mov	r1, r9
 8003d78:	eb43 0501 	adc.w	r5, r3, r1
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	00eb      	lsls	r3, r5, #3
 8003d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d8a:	00e2      	lsls	r2, r4, #3
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	461d      	mov	r5, r3
 8003d90:	4643      	mov	r3, r8
 8003d92:	18e3      	adds	r3, r4, r3
 8003d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d98:	464b      	mov	r3, r9
 8003d9a:	eb45 0303 	adc.w	r3, r5, r3
 8003d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	008b      	lsls	r3, r1, #2
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc8:	4621      	mov	r1, r4
 8003dca:	008a      	lsls	r2, r1, #2
 8003dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dd0:	f7fc fa0c 	bl	80001ec <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4b60      	ldr	r3, [pc, #384]	; (8003f5c <UART_SetConfig+0x4e4>)
 8003dda:	fba3 2302 	umull	r2, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	011c      	lsls	r4, r3, #4
 8003de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	1891      	adds	r1, r2, r2
 8003dfa:	61b9      	str	r1, [r7, #24]
 8003dfc:	415b      	adcs	r3, r3
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e04:	4641      	mov	r1, r8
 8003e06:	1851      	adds	r1, r2, r1
 8003e08:	6139      	str	r1, [r7, #16]
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	414b      	adcs	r3, r1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	00cb      	lsls	r3, r1, #3
 8003e20:	4651      	mov	r1, sl
 8003e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e26:	4651      	mov	r1, sl
 8003e28:	00ca      	lsls	r2, r1, #3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4642      	mov	r2, r8
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e38:	464b      	mov	r3, r9
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	eb42 0303 	adc.w	r3, r2, r3
 8003e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	008b      	lsls	r3, r1, #2
 8003e60:	4641      	mov	r1, r8
 8003e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e66:	4641      	mov	r1, r8
 8003e68:	008a      	lsls	r2, r1, #2
 8003e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e6e:	f7fc f9bd 	bl	80001ec <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <UART_SetConfig+0x4e4>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	; 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a34      	ldr	r2, [pc, #208]	; (8003f5c <UART_SetConfig+0x4e4>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e96:	441c      	add	r4, r3
 8003e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003ea0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ea2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	1891      	adds	r1, r2, r2
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	415b      	adcs	r3, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	1851      	adds	r1, r2, r1
 8003eba:	6039      	str	r1, [r7, #0]
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	414b      	adcs	r3, r1
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ece:	4659      	mov	r1, fp
 8003ed0:	00cb      	lsls	r3, r1, #3
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed8:	4651      	mov	r1, sl
 8003eda:	00ca      	lsls	r2, r1, #3
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	663b      	str	r3, [r7, #96]	; 0x60
 8003efc:	667a      	str	r2, [r7, #100]	; 0x64
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	008b      	lsls	r3, r1, #2
 8003f0e:	4641      	mov	r1, r8
 8003f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f14:	4641      	mov	r1, r8
 8003f16:	008a      	lsls	r2, r1, #2
 8003f18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f1c:	f7fc f966 	bl	80001ec <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <UART_SetConfig+0x4e4>)
 8003f26:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2164      	movs	r1, #100	; 0x64
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <UART_SetConfig+0x4e4>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4422      	add	r2, r4
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	51eb851f 	.word	0x51eb851f

08003f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f60:	b084      	sub	sp, #16
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	f107 001c 	add.w	r0, r7, #28
 8003f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d122      	bne.n	8003fbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 faa2 	bl	80044fc <USB_CoreReset>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e01a      	b.n	8003ff4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa96 	bl	80044fc <USB_CoreReset>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8003fe6:	e005      	b.n	8003ff4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10b      	bne.n	8004012 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f043 0206 	orr.w	r2, r3, #6
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800401e:	b004      	add	sp, #16
 8004020:	4770      	bx	lr

08004022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d115      	bne.n	8004092 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004072:	2001      	movs	r0, #1
 8004074:	f7fd fb2a 	bl	80016cc <HAL_Delay>
      ms++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa2e 	bl	80044e0 <USB_GetMode>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d01e      	beq.n	80040c8 <USB_SetCurrentMode+0x84>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b31      	cmp	r3, #49	; 0x31
 800408e:	d9f0      	bls.n	8004072 <USB_SetCurrentMode+0x2e>
 8004090:	e01a      	b.n	80040c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d115      	bne.n	80040c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7fd fb11 	bl	80016cc <HAL_Delay>
      ms++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fa15 	bl	80044e0 <USB_GetMode>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <USB_SetCurrentMode+0x84>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b31      	cmp	r3, #49	; 0x31
 80040c0:	d9f0      	bls.n	80040a4 <USB_SetCurrentMode+0x60>
 80040c2:	e001      	b.n	80040c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e005      	b.n	80040d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b32      	cmp	r3, #50	; 0x32
 80040cc:	d101      	bne.n	80040d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040dc:	b084      	sub	sp, #16
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e009      	b.n	8004110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3340      	adds	r3, #64	; 0x40
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b0e      	cmp	r3, #14
 8004114:	d9f2      	bls.n	80040fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11c      	bne.n	8004156 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
 8004154:	e00b      	b.n	800416e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004174:	461a      	mov	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004180:	4619      	mov	r1, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004188:	461a      	mov	r2, r3
 800418a:	680b      	ldr	r3, [r1, #0]
 800418c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10c      	bne.n	80041ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f965 	bl	800446c <USB_SetDevSpeed>
 80041a2:	e008      	b.n	80041b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041a4:	2101      	movs	r1, #1
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f960 	bl	800446c <USB_SetDevSpeed>
 80041ac:	e003      	b.n	80041b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041ae:	2103      	movs	r1, #3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f95b 	bl	800446c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041b6:	2110      	movs	r1, #16
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f8f3 	bl	80043a4 <USB_FlushTxFifo>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f91f 	bl	800440c <USB_FlushRxFifo>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e043      	b.n	800428a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004218:	d118      	bne.n	800424c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	461a      	mov	r2, r3
 800422e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e013      	b.n	800425e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	461a      	mov	r2, r3
 8004244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e008      	b.n	800425e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d3b7      	bcc.n	8004202 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e043      	b.n	8004320 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ae:	d118      	bne.n	80042e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e013      	b.n	80042f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e008      	b.n	80042f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d3b7      	bcc.n	8004298 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f043 0210 	orr.w	r2, r3, #16
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699a      	ldr	r2, [r3, #24]
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <USB_DevInit+0x2c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f043 0208 	orr.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004388:	f043 0304 	orr.w	r3, r3, #4
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800439c:	b004      	add	sp, #16
 800439e:	4770      	bx	lr
 80043a0:	803c3800 	.word	0x803c3800

080043a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a13      	ldr	r2, [pc, #76]	; (8004408 <USB_FlushTxFifo+0x64>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e01b      	b.n	80043fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	daf2      	bge.n	80043b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	019b      	lsls	r3, r3, #6
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3301      	adds	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a08      	ldr	r2, [pc, #32]	; (8004408 <USB_FlushTxFifo+0x64>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e006      	b.n	80043fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d0f0      	beq.n	80043dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	00030d40 	.word	0x00030d40

0800440c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a11      	ldr	r2, [pc, #68]	; (8004468 <USB_FlushRxFifo+0x5c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e018      	b.n	800445c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	daf2      	bge.n	8004418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2210      	movs	r2, #16
 800443a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <USB_FlushRxFifo+0x5c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e006      	b.n	800445c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b10      	cmp	r3, #16
 8004458:	d0f0      	beq.n	800443c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	00030d40 	.word	0x00030d40

0800446c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044b8:	f023 0303 	bic.w	r3, r3, #3
 80044bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044cc:	f043 0302 	orr.w	r3, r3, #2
 80044d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <USB_CoreReset+0x64>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e01b      	b.n	8004552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	daf2      	bge.n	8004508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3301      	adds	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <USB_CoreReset+0x64>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e006      	b.n	8004552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d0f0      	beq.n	8004532 <USB_CoreReset+0x36>

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	00030d40 	.word	0x00030d40

08004564 <__libc_init_array>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4d0d      	ldr	r5, [pc, #52]	; (800459c <__libc_init_array+0x38>)
 8004568:	4c0d      	ldr	r4, [pc, #52]	; (80045a0 <__libc_init_array+0x3c>)
 800456a:	1b64      	subs	r4, r4, r5
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	2600      	movs	r6, #0
 8004570:	42a6      	cmp	r6, r4
 8004572:	d109      	bne.n	8004588 <__libc_init_array+0x24>
 8004574:	4d0b      	ldr	r5, [pc, #44]	; (80045a4 <__libc_init_array+0x40>)
 8004576:	4c0c      	ldr	r4, [pc, #48]	; (80045a8 <__libc_init_array+0x44>)
 8004578:	f000 f820 	bl	80045bc <_init>
 800457c:	1b64      	subs	r4, r4, r5
 800457e:	10a4      	asrs	r4, r4, #2
 8004580:	2600      	movs	r6, #0
 8004582:	42a6      	cmp	r6, r4
 8004584:	d105      	bne.n	8004592 <__libc_init_array+0x2e>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	f855 3b04 	ldr.w	r3, [r5], #4
 800458c:	4798      	blx	r3
 800458e:	3601      	adds	r6, #1
 8004590:	e7ee      	b.n	8004570 <__libc_init_array+0xc>
 8004592:	f855 3b04 	ldr.w	r3, [r5], #4
 8004596:	4798      	blx	r3
 8004598:	3601      	adds	r6, #1
 800459a:	e7f2      	b.n	8004582 <__libc_init_array+0x1e>
 800459c:	08004608 	.word	0x08004608
 80045a0:	08004608 	.word	0x08004608
 80045a4:	08004608 	.word	0x08004608
 80045a8:	0800460c 	.word	0x0800460c

080045ac <memset>:
 80045ac:	4402      	add	r2, r0
 80045ae:	4603      	mov	r3, r0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <_init>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr

080045c8 <_fini>:
 80045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ca:	bf00      	nop
 80045cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ce:	bc08      	pop	{r3}
 80045d0:	469e      	mov	lr, r3
 80045d2:	4770      	bx	lr
